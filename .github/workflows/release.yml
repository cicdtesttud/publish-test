name: Push to Main or Tag

on:
  push:
    branches:
      - main
  #   tags:
  #     - 'v[0-9]+.[0-9]+.[0-9]+'  
  workflow_dispatch:

jobs:
  define-targets:
    runs-on: ubuntu-latest
    outputs:
      target-matrix: ${{ steps.parse-target-specs.outputs.target_matrix }}
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: Parse Target Specs
        id: parse-target-specs
        run: |
          echo "target_matrix=$(jq -c '{include: ([keys[] as $k | .[$k][] | (. + { arch: $k })])}' .github/workflows/target_specs.json -c)" >> $GITHUB_OUTPUT
  auto-tag:
    name: Auto-Tag current Head
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      tag: ${{ steps.determine-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auto-Tag
        id: push-tag
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l --sort=-v:refname "v*" | head -n 1)
          
          if [ -z "${LATEST_TAG}" ]; then
            echo "No tag found. Using v0.0.1-rc0 as latest tag."
            LATEST_TAG=v0.0.1-rc0
          else
            echo "Latest tag: $LATEST_TAG"
          fi

          LATEST_TAG=${LATEST_TAG:1}  # Remove 'v' prefix
          MAJOR=${LATEST_TAG%%.*}
          TEMP=${LATEST_TAG#*.}
          MINOR=${TEMP%%.*}
          PATCHTEMP=${TEMP#*.}
          PATCH=${PATCHTEMP%%-*}
          RC_TMP=${PATCHTEMP#*-}
          RC=${RC_TMP:2}

          if [ -z "${RC}" ]; then
            PATCH=$((PATCH+1))
            RC=1
          else
            RC=$((RC+1))
          fi

          VERSION="v${MAJOR}.${MINOR}.${PATCH}-rc${RC}"
          echo "New Version: ${VERSION}"

          # Set output
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

          git config --global user.email "johannes.pietrzyk@tu-dresden.de"
          git config --global user.name "GitHub Action (Maintainer: Johannes Pietrzyk)"
          git tag -a $VERSION -m "${VERSION} (Auto-tagged by GitHub Actions)"
          git push origin --tags

      - name: Determine Tag
        id: determine-tag
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "Pushed to tags. Tag: ${TAG_NAME}"
          else
            echo "tag=${{ steps.push-tag.outputs.tag }}" >> $GITHUB_OUTPUT
            echo "Auto-tagged. Tag: ${{ steps.push-tag.outputs.tag }}"
          fi
  
  build-generation-image:
    name: Generation Image (build and push on demand)
    uses: ./.github/workflows/build_and_push_dockerhub.yml
    with:
      context: .
      path: .github/workflows/docker/generate_ubuntu.dockerfile
      image_name: tsl-generate
      platforms: linux/amd64
      mandatory_files: requirements.txt
    secrets:
      dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
    
  run-generation:
    needs: [build-generation-image, define-targets]
    runs-on: ubuntu-latest
    container:
      image: ${{ vars.DOCKERHUB_USERNAME }}/${{ needs.build-generation-image.outputs.image_fqname }}:latest
    strategy:
      matrix: ${{ fromJson(needs.define-targets.outputs.target-matrix) }}
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Generate tsl
        run: |
          python3 main.py --targets ${{ matrix.flags }} -o docker_out/${{ matrix.name }}

      - name: Upload tsl
        uses: actions/upload-artifact@v4
        with:
          name: tsl-${{ matrix.arch }}-${{ matrix.name }}
          path: ./docker_out/${{ matrix.name }}
          compression-level: 9
    
  consolidate-tsl:
    needs: [run-generation]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: repository

      - name: Merge tsl flavors
        uses: actions/upload-artifact/merge@v4
        with:
          name: tsl-consolidated
          pattern: tsl-*
          separate-directories: true
          delete-merged: true
          compression-level: 9
          retention-days: 1

      - name: Download all tsl-flavours
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/tsl
          name: tsl-consolidated

      - name: Copy relevant files
        run: |
          mkdir -p ${{ github.workspace }}/release
          cp ${{ github.workspace }}/repository/.github/workflows/release/select_flavor.sh ${{ github.workspace }}/release/select_flavor.sh
          cp ${{ github.workspace }}/repository/detect_flags.sh ${{ github.workspace }}/release/detect_flags.sh
      
      - name: Substitute placeholders
        run: |
          python3 ${{ github.workspace }}/repository/.github/workflows/release/prepare_select_flavor.py \
            --install-sh ${{ github.workspace }}/release/select_flavor.sh \
            --folder-prefix "tsl" \
            --targets-spec-file repository/.github/workflows/target_specs.json \
            --tsl-folder-ph "\$<< TslFolderArrayValues >>" \
            --default-flags-array-ph "\$<< DefaultFlagsArrayValues >>" \
            --alt-flags-array-ph "\$<< AlternativeFlagsArrayValues >>" \
            --alt-to-tsl-mapping-ph "\$<< AlternativeMappingsArrayValues >>"

      - name: Tarball tsl
        run: |
          cd ${{ github.workspace }}/tsl/
          tar -czf ${{ github.workspace }}/release/tsl.tar.gz -C . $(find . -maxdepth 1 -type d -name 'tsl-*' -printf '%P\n')

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tsl-artifact
          path: ${{ github.workspace }}/release
          compression-level: 9
          overwrite: true
          retention-days: 1
  
  build-rpm-builder-image:
    name: RPM builder Image (build and push on demand)
    uses: ./.github/workflows/build_and_push_dockerhub.yml
    with:
      context: .
      path: .github/workflows/docker/package_rpm_fedora.dockerfile
      image_name: tsl-package-rpm
      platforms: linux/amd64
    secrets:
      dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}

  package-rpm:
    needs: [auto-tag, consolidate-tsl, build-rpm-builder-image]
    runs-on: ubuntu-latest
    container:
      image: ${{ vars.DOCKERHUB_USERNAME }}/${{ needs.build-rpm-builder-image.outputs.image_fqname }}:latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: repository
      
      - name: Download tsl artifacts
        uses: actions/download-artifact@v4
        with:
          name: tsl-artifact
          path: artifacts
        
      - name: Prepare specs
        run: |
          cp repository/.github/workflows/release/rpm/tsl.spec /root/rpmbuild/SPECS/
          TAG="${{ needs.auto-tag.outputs.tag }}"
          if [[ "${TAG}" == *"-"* ]]; then
            VERSION=${TAG%%-*}
            RELEASE=${TAG##*-}
          else
            VERSION=${TAG}
            RELEASE=1
          fi
          sed -i "s/\$<< VERSION_TAG >>/${VERSION}/g" /root/rpmbuild/SPECS/tsl.spec
          sed -i "s/\$<< RELEASE_TAG >>/${RELEASE}/g" /root/rpmbuild/SPECS/tsl.spec
      
      - name: Prepare sources
        run: |
          cp ${{ github.workspace }}/artifacts/tsl.tar.gz /root/rpmbuild/SOURCES/
          cp ${{ github.workspace }}/artifacts/select_flavor.sh /root/rpmbuild/SOURCES/
          cp ${{ github.workspace }}/artifacts/detect_flags.sh /root/rpmbuild/SOURCES/
          chmod +x /root/rpmbuild/SOURCES/select_flavor.sh
          chmod +x /root/rpmbuild/SOURCES/detect_flags.sh
          mkdir -p ${{ github.workspace }}/artifacts/rpm
          ls /root/rpmbuild/SOURCES
        
      - name: Run rpmbuild
        run: |
          rpmbuild -bb /root/rpmbuild/SPECS/tsl.spec --buildroot=/root/rpmbuild/BUILDROOT/ --define "_rpmdir ${{ github.workspace }}/artifacts/rpm" --define "_verbose 1"

      - name: Test install
        run: |
          dnf install -y $(find artifacts/rpm -type f -name '*.rpm')
      
      - name: Compile test programm
        run: |
          g++ -march=native -Wno-ignored-attributes -Wno-attributes -Wdeprecated-declarations -flax-vector-conversions -o test_program repository/.github/workflows/release/test.cpp

      - name: Test uninstall
        run: |
          dnf remove -y libtsl-dev