<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: sans-serif;}
.avail {
  color: rgb(51, 208, 51);
  font-weight: bolder;
  font-size: 15pt;
}
.no_avail {
  color: rgb(187, 40, 40);
  font-weight: bold;
  font-size: 15pt;
}
.primitive {
  overflow: hidden;
  border: 1px dashed #ccc;
  background-color: #f1f1f1;
}
.primitive button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;
  text-align: left;
  width: 100%;
}
.primitive button:hover {
  background-color: #ddd;
}
.primitive button.active {
  background-color: #ccc;
}
.primitiveinfo {
  display: none;
  padding: 14px 16px;
  border: 1px solid #ccc;
}
.container{
  margin: 20px auto;
  width:98%;
  height:100%;
  background-color:#fff;
  display:grid;
  grid-template-columns: 250px auto;
  grid-column-gap: 20px;
  grid-row-gap: 20px;
  .box{
    padding:20px;
    border-radius:10px;
    border: 1px solid #ccc;
    color:#000;
    align-items:center;
    font-family:sans-serif;
  }
  .corner {
    padding:20px;
    border-radius:10px;
    color:#000;
    align-items:center;
    font-family:sans-serif;    
  }
  .search {
    padding:20px;
    border-radius:10px;
    color:#000;
    font-family:sans-serif;    
    bottom: 0;
    align-self: end;
  }
  .bar {
    min-width: 250px;
    width:100%;
  }
}
.resetButton {
  background-image: linear-gradient(#f7f8fa ,#e7e9ec);
  border-color: #adb1b8 #a2a6ac #8d9096;
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  box-shadow: rgba(255,255,255,.6) 0 1px 0 inset;
  box-sizing: border-box;
  color: #0f1111;
  cursor: pointer;
  display: inline-block;
  font-family: sans-serif;
  font-size: 14px;
  height: 29px;
  font-size: 13px;
  outline: 0;
  overflow: hidden;
  padding: 0 11px;
  text-align: center;
  text-decoration: none;
  text-overflow: ellipsis;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  white-space: nowrap;
}

.resetButton:active {
  border-bottom-color: #a2a6ac;
}

.resetButton:active:hover {
  border-bottom-color: #a2a6ac;
}

.resetButton:hover {
  border-color: #a2a6ac #979aa1 #82858a;
}

</style>
</head>
<body>
  <div class="container">
    <div class="corner"><img src="---logo_relative_path---" width="120%"></div>
    <div class="search"><input class="bar" type="text" id="primitiveFilterInput" onkeyup="filterPrimitives()" placeholder="Search primitives by name or keywords in their brief description"></div>
    <div class="box">Check to filter by primitive category. If all are unchecked, no filters are applied.<br><br>---filterBoxes---<br><button class="resetButton" role="button" onclick="resetBoxesAndSearch()">Reset</button></div>
    <div class="box">---content---</div>
</div>
      <script>
        function togglePrimitive(evt, primName) {
          if (document.getElementById(primName).style.display == "block") {
            button = document.getElementById(primName + "_link");
            button.className = button.className.replace(" active", "");
            document.getElementById(primName).style.display = "none";
          } else {
            document.getElementById(primName).style.display = "block";
            evt.currentTarget.className += " active";
          }
        }
        function filterPrimitives() {
          var input, filterPredicate, primContainer;
          input = document.getElementById('primitiveFilterInput');
          filterPredicate = input.value.toUpperCase();
          primContainer = document.getElementsByClassName("primitiveContainer");
          for (var i = 0; i < primContainer.length; i++) {
            var primitive = primContainer[i].getElementsByTagName("button")[0];
            var descr = primContainer[i].getElementsByClassName("description")[0].textContent;
            var found_match = 0
            txtValue = primitive.textContent;
            if (txtValue.toUpperCase().indexOf(filterPredicate) > -1) {
              found_match += 1
            }
            keywordsFound = 0
            txtKeywords = filterPredicate.split(" ").filter(n=>n)
            for ( keyword of txtKeywords ) {
              if (descr.toUpperCase().indexOf(keyword) > -1) {
                keywordsFound += 1
              }
            }
            if ( keywordsFound === txtKeywords.length) {
              found_match += 1
            }
            if (found_match > 0) {
              primContainer[i].style.display = "";
            } else {
              primContainer[i].style.display = "none";
            }
          }
        }
        function filterByCheckbox() {
          var primCategories = document.getElementsByClassName('primitiveCategory');
          var checkboxes = document.getElementsByClassName('primitiveClassSelector');
          var checked_boxes = [];
          for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) { checked_boxes.push(checkboxes[i]); }
          }
          console.log("checkedboxes:",checked_boxes.length," All Count:", checkboxes.length);
          // If all are unchecked, we do not filter
          if ( checked_boxes.length == 0 ) {
            console.log("All unchecked.");
            for ( category of primCategories ) {
              category.style.display = '';
            }
          } else {
            for ( category of primCategories ) {
              category.style.display = 'none';
              for (checkbox of checked_boxes) {
                if ( checkbox.value == category.id ) {category.style.display = '';}
              }
            }
          }
        }
        function resetBoxesAndSearch(){
          var checkboxes = document.getElementsByClassName('primitiveClassSelector');
          for ( checkbox of checkboxes ) { checkbox.checked = false; }
          input = document.getElementById('primitiveFilterInput');
          input.value = "";
          filterByCheckbox();
          filterPrimitives();
        }
      </script>
</body>
</html> 