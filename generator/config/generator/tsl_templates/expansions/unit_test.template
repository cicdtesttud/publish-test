{% macro create_test_call(case, extension, ctype) -%}
{% if case['conversion_types'] %}
{%    for (additional_extension, conversion_types) in case['conversion_types'][extension].items() %}
{%      for conversion_type in conversion_types[ctype] %}
        CHECK(test_{{ case['primitive_name'] }}_{{ case['test_name'] }}<simd<{{ ctype }}, {{ extension }}>, simd<{{ conversion_type }}, {{ additional_extension }}>>());
{%      endfor %}
{%    endfor %}
{% else %}
        CHECK(test_{{ case['primitive_name'] }}_{{ case['test_name'] }}<simd<{{ ctype }}, {{ extension }}>>());
{% endif %}
{%- endmacro -%}

namespace {{ tsl_namespace }} {
    {% for primitive_class_test in tests %}
    {%    for primitive_test in primitive_class_test['primitive_tests'] %}
    {%       for case in primitive_test['cases'] %}
    {%        if case['conversion_types'] %}
    template<VectorProcessingStyle {{ primitive_test['vector_name'] }}, VectorProcessingStyle {{ primitive_test['additional_simd_template_parameter']['name'] }}>
    {%        else %}
    template<VectorProcessingStyle {{ primitive_test['vector_name'] }}>
    {%        endif %}
    bool test_{{ case['primitive_name'] }}_{{ case['test_name'] }}() {
        using namespace {{ tsl_namespace }};
        {%- filter indent(width=8) +%}
{{ case['implementation'] }}
        {% endfilter %}
    }
    {%       endfor %}
    {%    endfor %}
    {% endfor %}
}

{% for primitive_class_test in tests %}
{%    for primitive_test in primitive_class_test['primitive_tests'] %}
{%       for extension in known_extensions %}
TEST_CASE("Testing primitive '{{ primitive_test['functor_name'] }}' for {{ extension }}", "[{{ primitive_test['functor_name'] }}],[{{ extension }}]") {
    using namespace {{ tsl_namespace }};
{%             for case in primitive_test['cases'] %}
    SECTION("{{ case['test_name'] }}") {
{%                   if extension not in case['complete_tests_lib_definitions'] %}
{%                      set resolved = False %}
{%                      if case['missing_required_primitive_definitions'] is not none %}
{%                         if extension in case['missing_required_primitive_definitions'] %}
{%                            set resolved = True %}
{%                            for ctype in case['missing_required_primitive_definitions'][extension] %}
        WARN("Can't run. Required primitive(s) {{ case['missing_required_primitive_definitions'][extension][ctype] }} not provided.");
{%                            endfor %}
{%                         endif %}
{%                      endif %}
{%                      if extension in case['missing_previous_tests'] and not resolved %}
{%                         set resolved = True %}
{%                         for ctype in case['missing_required_primitive_definitions'][extension] %}
        WARN("Unreliable test. Required tests for primitive(s) {{ case['missing_previous_tests'][extension][ctype] }} not provided.");
{{ create_test_call(case, extension, ctype) }}
{%                         endfor %}
{%                      endif %}
{%                      if not resolved %}
        WARN("Primitive {{ case['primitive_name'] }} not implemented for {{ extension }}");
{%                      endif %}
{%                   else %}
{%                      for ctype in known_ctypes %}
{%                         if ctype in case['complete_tests_lib_definitions'][extension] %}
{{ create_test_call(case, extension, ctype) }}
{%                         else %}
{%                            set resolved = False %}
{%                            if case['missing_required_primitive_definitions'] is not none %}
{%                               if extension in case['missing_required_primitive_definitions'] %}
{%                                  if ctype in case['missing_required_primitive_definitions'][extension] %}
{%                                     set resolved = True %}
        WARN("Can't run. Required primitive(s) {{ case['missing_required_primitive_definitions'][extension][ctype] }} not provided.");
{%                                  endif %}
{%                               endif %}
{%                            endif %}
{%                            if extension in case['missing_previous_tests'] and not resolved %}
{%                               if ctype in case['missing_required_primitive_definitions'][extension] %}
{%                                  set resolved = True %}
        WARN("Unreliable test. Required tests for primitive(s) {{ case['missing_previous_tests'][extension][ctype] }} not provided.");
{{ create_test_call(case, extension, ctype) }}
{%                               endif %}
{%                            endif %}
{%                            if not resolved %}
        WARN("Primitive {{ case['primitive_name'] }}<simd<{{ ctype }}, {{ extension }}>> not implemented.");
{%                            endif %}
{%                         endif %}
{%                      endfor %}
{%                   endif %}
    }
{%             endfor %}
}
{%       endfor %}
{%    endfor %}
{% endfor %}
