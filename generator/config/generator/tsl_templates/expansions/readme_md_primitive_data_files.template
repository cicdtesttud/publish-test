{% macro traverse_dict(data, level, toc_link) %}
   {% for k, v in data.items() %}
      {% if v.__class__.__name__ == 'dict' %}
         {% if level > 0 %}
<details open>
         {% else %}
<details>
         {% endif %}
         {% if k.__class__.__name__ == 'tuple' %}
<summary><a name="{{ k[1] }}"></a>{{ k[0] }}: ({{ k[2] }})</summary>

         {% else %}
<summary><a name="{{ k }}"></a>{{ k }}</summary>

         {% endif %}
<blockquote>

{{ traverse_dict(v, level+1,toc_link) }}

</blockquote>
         {% if level == 0 %}

[Back to Table of Content](#{{ toc_link }})

         {% endif %}
</details>

      {% else %}
         {% if "links_to" == k %}
   same as: [{{ v[0] }}](#{{ v[1] }})
         {% elif "type" == k or "example" == k %}
{{ k }}: `{{ v }}` <br />
         {% else %}
{{ k }}: {{ v }} <br />
         {% endif %}
      {% endif %}
   {% endfor %}
{% endmacro %}
# TSL Primitive Data
< Insert general remarks here >

## Basics
< Describe the basics here: how is it used within the generator, ...>

## Extension
< Describe what an extension is, what it represents >

### Fields
<a name="toc-extension"></a>
##### Table of Contents

|Required Fields|Optional Fields
|:--|:--|
{% for field in extension_fields_list %}
{% set req = '[' ~ field[0][0] ~ '](#' ~ field[0][1] ~ ')' if field[0] else '' %}
{% set opt = '[' ~ field[1][0] ~ '](#' ~ field[1][1] ~ ')' if field[1] else '' %}
{{ req }} | {{ opt }}
{% endfor %}

{{ traverse_dict(extension,0,"toc-extension") }}

## Primitive
< Describe what a primitive is, what it represents >

### Fields
<a name="toc-primitive"></a>
##### Table of Contents
|Required Fields|Optional Fields
|:--|:--|
{% for field in primitive_fields_list %}
{% set req = '[' ~ field[0][0] ~ '](#' ~ field[0][1] ~ ')' if field[0] else '' %}
{% set opt = '[' ~ field[1][0] ~ '](#' ~ field[1][1] ~ ')' if field[1] else '' %}
{{ req }} | {{ opt }}
{% endfor %}
{{ traverse_dict(primitive,0,"toc-primitive") }}